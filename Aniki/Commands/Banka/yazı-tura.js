const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const userSchema = require('../../Models/user');
const gameChannelSchema = require('../../Models/gameChannel'); // Bu ÅŸemayÄ± model dosyalarÄ±nÄ±zda tanÄ±mlayÄ±n

module.exports = {
    data: new SlashCommandBuilder()
        .setName('yazÄ±-tura')
        .setDescription('YazÄ±-Tura oyunu oynar.')
        .addIntegerOption(option =>
            option.setName('miktar')
                .setDescription('Bahis miktarÄ±nÄ± girin')
                .setRequired(true)),

    async execute(interaction) {
        const amount = interaction.options.getInteger('miktar');
        const user = interaction.user;

        // Belirlenen oyun kanalÄ±nÄ± veritabanÄ±ndan alÄ±n
        const gameChannelData = await gameChannelSchema.findOne({ serverId: interaction.guild.id });
        if (!gameChannelData) {
            return interaction.reply({ content: 'Oyun kanalÄ± henÃ¼z belirlenmemiÅŸ. "/yt-kanal" yazarak belirleyebilirsiniz.', ephemeral: true });
        }

        if (interaction.channel.id !== gameChannelData.channelId) {
            return interaction.reply({ content: 'YazÄ±-Tura\'yÄ± sadece belirlenen kanalda oynayabilirsiniz.', ephemeral: true });
        }

        if (amount < 1 || amount > 250000) {
            return interaction.reply({ content: 'Bahis miktarÄ±nÄ±z 1 ile 250.000 arasÄ±nda olmalÄ±dÄ±r.', ephemeral: true });
        }

        let userData = await userSchema.findOne({ id: user.id });
        if (!userData) {
            userData = await userSchema.create({ id: user.id, coin: 0 });
        }

        // BorÃ§ kontrolÃ¼
        const currentTime = new Date();
        if (userData.debt > 0 && (!userData.debtPaidUntil || userData.debtPaidUntil > currentTime)) {
            return interaction.reply({ content: `48 saat boyunca borcunuzu Ã¶demeniz gerekiyor. Borcunuz: ${userData.debt} coin.`, ephemeral: true });
        }

        if (userData.coin < amount) {
            return interaction.reply({ content: 'Yetersiz bakiye.', ephemeral: true });
        }

        // Ä°lk olarak "Para dÃ¶nÃ¼yor..." mesajÄ±nÄ± gÃ¶nder
        const initialMessage = await interaction.reply({ 
            content: `**${user.tag}** ğŸ’µ **${amount}** harcadÄ± ve **tura** seÃ§ti\nPara dÃ¶nÃ¼yor... :coin:`,
            fetchReply: true
        });

        // 1 ile 2 arasÄ±nda rastgele seÃ§im yap
        const result = Math.random() < 0.5 ? '**yazÄ±**' : '**tura**';
        const isWinner = result === '**tura**'; // KullanÄ±cÄ± "tura" seÃ§tiÄŸi iÃ§in kazananÄ± buna gÃ¶re belirle

        // SonuÃ§larÄ± belirle
        const winAmount = amount * 2;
        userData.coin += isWinner ? winAmount : -amount;
        await userData.save();

        // SonuÃ§ mesajÄ±nÄ± belirle
        const resultMessage = isWinner 
            ? `KazandÄ±nÄ±z! **${winAmount}** coin kazandÄ±nÄ±z.` 
            : `Hepsini kaybettiniz... :c`;

        // MesajÄ± gÃ¼ncelle
        await initialMessage.edit({ content: `**${user.tag}** ğŸ’µ ${amount} harcadÄ± ve **tura** seÃ§ti\nPara dÃ¶nÃ¼yor... :coin: ${resultMessage}` });
    }
};
